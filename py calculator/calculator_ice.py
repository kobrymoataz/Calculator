# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `calculator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Calculator
_M_Calculator = Ice.openModule('Calculator')
__name__ = 'Calculator'

_M_Calculator._t_Service = IcePy.defineValue('::Calculator::Service', Ice.Value, -1, (), False, True, None, ())

if 'ServicePrx' not in _M_Calculator.__dict__:
    _M_Calculator.ServicePrx = Ice.createTempClass()
    class ServicePrx(Ice.ObjectPrx):

        def sum(self, op1, op2, context=None):
            return _M_Calculator.Service._op_sum.invoke(self, ((op1, op2), context))

        def sumAsync(self, op1, op2, context=None):
            return _M_Calculator.Service._op_sum.invokeAsync(self, ((op1, op2), context))

        def begin_sum(self, op1, op2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculator.Service._op_sum.begin(self, ((op1, op2), _response, _ex, _sent, context))

        def end_sum(self, _r):
            return _M_Calculator.Service._op_sum.end(self, _r)

        def sub(self, op1, op2, context=None):
            return _M_Calculator.Service._op_sub.invoke(self, ((op1, op2), context))

        def subAsync(self, op1, op2, context=None):
            return _M_Calculator.Service._op_sub.invokeAsync(self, ((op1, op2), context))

        def begin_sub(self, op1, op2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculator.Service._op_sub.begin(self, ((op1, op2), _response, _ex, _sent, context))

        def end_sub(self, _r):
            return _M_Calculator.Service._op_sub.end(self, _r)

        def mult(self, op1, op2, context=None):
            return _M_Calculator.Service._op_mult.invoke(self, ((op1, op2), context))

        def multAsync(self, op1, op2, context=None):
            return _M_Calculator.Service._op_mult.invokeAsync(self, ((op1, op2), context))

        def begin_mult(self, op1, op2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculator.Service._op_mult.begin(self, ((op1, op2), _response, _ex, _sent, context))

        def end_mult(self, _r):
            return _M_Calculator.Service._op_mult.end(self, _r)

        def div(self, op1, op2, context=None):
            return _M_Calculator.Service._op_div.invoke(self, ((op1, op2), context))

        def divAsync(self, op1, op2, context=None):
            return _M_Calculator.Service._op_div.invokeAsync(self, ((op1, op2), context))

        def begin_div(self, op1, op2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculator.Service._op_div.begin(self, ((op1, op2), _response, _ex, _sent, context))

        def end_div(self, _r):
            return _M_Calculator.Service._op_div.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Calculator.ServicePrx.ice_checkedCast(proxy, '::Calculator::Service', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Calculator.ServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Calculator::Service'
    _M_Calculator._t_ServicePrx = IcePy.defineProxy('::Calculator::Service', ServicePrx)

    _M_Calculator.ServicePrx = ServicePrx
    del ServicePrx

    _M_Calculator.Service = Ice.createTempClass()
    class Service(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Calculator::Service', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Calculator::Service'

        @staticmethod
        def ice_staticId():
            return '::Calculator::Service'

        def sum(self, op1, op2, current=None):
            raise NotImplementedError("servant method 'sum' not implemented")

        def sub(self, op1, op2, current=None):
            raise NotImplementedError("servant method 'sub' not implemented")

        def mult(self, op1, op2, current=None):
            raise NotImplementedError("servant method 'mult' not implemented")

        def div(self, op1, op2, current=None):
            raise NotImplementedError("servant method 'div' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Calculator._t_ServiceDisp)

        __repr__ = __str__

    _M_Calculator._t_ServiceDisp = IcePy.defineClass('::Calculator::Service', Service, (), None, ())
    Service._ice_type = _M_Calculator._t_ServiceDisp

    Service._op_sum = IcePy.Operation('sum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0)), (), ((), IcePy._t_double, False, 0), ())
    Service._op_sub = IcePy.Operation('sub', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0)), (), ((), IcePy._t_double, False, 0), ())
    Service._op_mult = IcePy.Operation('mult', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0)), (), ((), IcePy._t_double, False, 0), ())
    Service._op_div = IcePy.Operation('div', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0)), (), ((), IcePy._t_double, False, 0), ())

    _M_Calculator.Service = Service
    del Service

# End of module Calculator
